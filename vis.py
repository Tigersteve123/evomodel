import argparse
import numpy as np
import matplotlib.pyplot as plt
import re

from model import model
from heatmap import heatmap
from summary import summary

parser = argparse.ArgumentParser(description='Generate labeled heatmaps')

parser.add_argument('matrix', metavar='mat', type=str, nargs=1, help='path to numpy matrix file generated by model')
parser.add_argument('--savepath', '-f', type=str, help='path to save figures')
parser.add_argument('--show', '-s', help='show figures', action='store_true')

m = parser.parse_args()

filename = m.matrix[0]

data = np.load(filename, allow_pickle=True)

if 'test' in filename:
    params = filename.split('_')[1:]
    params[-1] = params[-1][:-4]
    params = [float(x) for x in params]
    tc, acc = re.split('runs/testQuarantineTc|Acc|_', filename)[1:3]
    mod = model(params[0], .0000001, 11, params[1], 0.05, 5, params[2])
else: mod = model(0.0000001, .0000001, 11, 0.4, 0.05, 5, .9)

summ = summary(data[0], mod=mod)
#print(data[0])
qs, qi1, qi2, s, i1, i2, ihat = (x/1000 for x in (data[5], data[6], data[7], data[4], data[1], data[2], data[3]))

#if m.savepath: summ.vis(m.savepath, show=m.show)
#else: summ.vis(show=m.show)
if m.savepath: summ.plotQuarantine(qs, qi1, qi2, s, i1, i2, ihat, savedirec=m.savepath, fname='quarantine_'+tc+'_'+acc, show=m.show)
else: summ.plotQuarantine(qs, qi1, qi2, s, i1, i2, ihat, show=m.show)
